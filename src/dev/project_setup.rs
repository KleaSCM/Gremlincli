use std::fs;
use std::process::Command;
use colored::*;
use crate::dev::github_utils::GitHubCli;

/// Load ASCII art from a file
#[allow(dead_code)]
fn load_ascii(path: &str) -> String {
    fs::read_to_string(path).unwrap_or_else(|_| "✨ [ASCII missing] ✨".to_string())
}

/// Initialize a git repository and create initial commit
fn initialize_git(project_path: &str, is_private: bool) -> Result<(), String> {
    // Initialize git repository
    Command::new("git")
        .arg("init")
        .current_dir(project_path)
        .status()
        .map_err(|e| format!("Failed to initialize git: {}", e))?;

    // Create initial commit
    Command::new("git")
        .args(&["add", "."])
        .current_dir(project_path)
        .status()
        .map_err(|e| format!("Failed to add files to git: {}", e))?;

    Command::new("git")
        .args(&["commit", "-m", "Initial commit"])
        .current_dir(project_path)
        .status()
        .map_err(|e| format!("Failed to create initial commit: {}", e))?;

    // If private, create GitHub repository
    if is_private {
        let github = GitHubCli::new();
        github.create_repository(project_path, true)
            .map_err(|e| format!("Failed to create GitHub repository: {}", e))?;
    }

    Ok(())
}

/// Display the file structure of a project
pub fn display_file_structure(path: &str, prefix: &str) {
    if let Ok(entries) = fs::read_dir(path) {
        for entry in entries {
            if let Ok(entry) = entry {
                let path = entry.path();
                let name = path.file_name().unwrap().to_str().unwrap();
                
                if name.starts_with('.') {
                    continue;
                }

                println!("{}{}", prefix, name.bright_cyan());
                
                if path.is_dir() {
                    display_file_structure(path.to_str().unwrap(), &format!("{}  ", prefix));
                }
            }
        }
    }
}

/// Generate a .gitignore file content
fn generate_gitignore() -> String {
    r#"# Generated by Cargo
# will have compiled files and executables
/target/
**/*.rs.bk

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
# Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# IDE specific files
.idea/
.vscode/
*.swp
*.swo

# OS specific files
.DS_Store
Thumbs.db"#.to_string()
}

/// Generate a README.md file content
fn generate_readme(project_path: &str, template: &str) -> String {
    format!(r#"# {}

This project was generated using the {} template.

## Getting Started

### Prerequisites

- Rust (latest stable version)
- Cargo (comes with Rust)

### Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/{}.git
cd {}
```

2. Build the project:
```bash
cargo build
```

3. Run the project:
```bash
cargo run
```

## Project Structure

```
{}
```

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
"#, 
    project_path, 
    template,
    project_path,
    project_path,
    project_path
    )
}

/// Create a new project with the given name and template
pub fn create_project(project_path: &str, template: &str, is_private: bool) -> Result<(), String> {
    // Create project directory
    fs::create_dir_all(project_path)
        .map_err(|e| format!("Failed to create project directory: {}", e))?;

    // Create src directory
    let src_path = format!("{}/src", project_path);
    fs::create_dir_all(&src_path)
        .map_err(|e| format!("Failed to create src directory: {}", e))?;

    // Create .gitignore
    fs::write(format!("{}/.gitignore", project_path), generate_gitignore())
        .map_err(|e| format!("Failed to create .gitignore: {}", e))?;

    // Create README.md
    fs::write(format!("{}/README.md", project_path), generate_readme(project_path, template))
        .map_err(|e| format!("Failed to create README.md: {}", e))?;

    // Initialize git and create GitHub repository if private
    initialize_git(project_path, is_private)?;

    // Display project structure
    println!("\n{}", "Project structure:".bright_cyan());
    display_file_structure(project_path, "");

    Ok(())
}

pub fn create_rust_project(project_name: &str, with_github: bool, is_private: bool) -> Result<(), String> {
    let base_path = "/home/klea/Documents/Dev/";
    let project_path = format!("{}{}", base_path, project_name);

    // Create project directory and basic structure
    std::fs::create_dir_all(format!("{}/src", project_path))
        .map_err(|e| format!("Error creating project: {}", e))?;

    // Create Cargo.toml
    let cargo_toml = format!(r#"[package]
name = "{}"
version = "0.1.0"
edition = "2021"

[dependencies]"#, project_name);

    std::fs::write(format!("{}/Cargo.toml", project_path), cargo_toml)
        .map_err(|e| format!("Error creating Cargo.toml: {}", e))?;

    // Create main.rs with Hello World
    let main_rs = r#"fn main() {
    println!("Hello, world!");
}"#;

    std::fs::write(format!("{}/src/main.rs", project_path), main_rs)
        .map_err(|e| format!("Error creating main.rs: {}", e))?;

    if with_github {
        let github = GitHubCli::new();
        
        github.install()
            .map_err(|e| format!("GitHub CLI installation failed: {}", e))?;
        
        github.authenticate()
            .map_err(|e| format!("GitHub authentication failed: {}", e))?;

        github.create_repository(project_name, is_private)
            .map_err(|e| format!("Repository creation failed: {}", e))?;
    }

    Ok(())
}

/// Create a new Go project
pub fn create_go_project(project_name: &str, with_github: bool, is_private: bool) -> Result<(), String> {
    let base_path = "/home/klea/Documents/Dev/";
    let project_path = format!("{}{}", base_path, project_name);

    // Create basic project structure
    create_project(&project_path, "Go", is_private)?;

    // Create go.mod
    let go_mod = format!(r#"module {}

go 1.21"#, project_name);

    fs::write(format!("{}/go.mod", project_path), go_mod)
        .map_err(|e| format!("Failed to create go.mod: {}", e))?;

    // Create main.go
    let main_go = r#"package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
}"#;

    fs::write(format!("{}/main.go", project_path), main_go)
        .map_err(|e| format!("Failed to create main.go: {}", e))?;

    if with_github {
        let github = GitHubCli::new();
        
        github.install()
            .map_err(|e| format!("GitHub CLI installation failed: {}", e))?;
        
        github.authenticate()
            .map_err(|e| format!("GitHub authentication failed: {}", e))?;

        github.create_repository(&project_path, is_private)
            .map_err(|e| format!("Repository creation failed: {}", e))?;
    }

    // Display project structure
    println!("\n{}", "Project structure:".bright_cyan());
    display_file_structure(&project_path, "");

    Ok(())
}

/// Create a new C++ project
pub fn create_cpp_project(project_name: &str, with_github: bool, is_private: bool) -> Result<(), String> {
    let base_path = "/home/klea/Documents/Dev/";
    let project_path = format!("{}{}", base_path, project_name);

    // Create basic project structure
    create_project(&project_path, "C++", is_private)?;

    // Create src directory
    let src_path = format!("{}/src", project_path);
    fs::create_dir_all(&src_path)
        .map_err(|e| format!("Failed to create src directory: {}", e))?;

    // Create include directory
    let include_path = format!("{}/include", project_path);
    fs::create_dir_all(&include_path)
        .map_err(|e| format!("Failed to create include directory: {}", e))?;

    // Create main.cpp
    let main_cpp = r#"#include <iostream>

int main() {
    std::cout << "Hello, World!" << std::endl;
    return 0;
}"#;

    fs::write(format!("{}/src/main.cpp", project_path), main_cpp)
        .map_err(|e| format!("Failed to create main.cpp: {}", e))?;

    if with_github {
        let github = GitHubCli::new();
        
        github.install()
            .map_err(|e| format!("GitHub CLI installation failed: {}", e))?;
        
        github.authenticate()
            .map_err(|e| format!("GitHub authentication failed: {}", e))?;

        github.create_repository(&project_path, is_private)
            .map_err(|e| format!("Repository creation failed: {}", e))?;
    }

    // Display project structure
    println!("\n{}", "Project structure:".bright_cyan());
    display_file_structure(&project_path, "");

    Ok(())
}
